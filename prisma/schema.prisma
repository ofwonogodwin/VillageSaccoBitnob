// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  firstName  String?
  lastName   String?
  phone      String?
  role       Role      @default(MEMBER)
  isActive   Boolean   @default(false)
  savings    Saving[]
  loans      Loan[]
  cards      VirtualCard[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("users")
}

model Saving {
  id        String    @id @default(uuid())
  userId    String
  amount    Float
  currency  String    @default("USDT")
  txHash    String?   // Bitnob transaction hash
  status    TransactionStatus @default(PENDING)
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings")
}

model Loan {
  id          String     @id @default(uuid())
  userId      String
  amount      Float
  interest    Float      @default(5.0)
  reason      String?
  status      LoanStatus @default(PENDING)
  disbursedVia String?   // "wallet" or "virtual-card"
  txHash      String?    // Bitnob transaction hash
  dueDate     DateTime?
  approvedAt  DateTime?
  disbursedAt DateTime?
  repaidAt    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model VirtualCard {
  id          String    @id @default(uuid())
  userId      String
  cardId      String?   // Bitnob card ID
  maskedPan   String?   // Masked card number
  expiryMonth String?
  expiryYear  String?
  cvv         String?
  balance     Float     @default(0)
  currency    String    @default("USD")
  status      CardStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("virtual_cards")
}

model Transaction {
  id          String    @id @default(uuid())
  fromUserId  String?
  toUserId    String?
  amount      Float
  currency    String    @default("USDT")
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  txHash      String?   // Bitnob transaction hash
  reference   String?   // Internal reference
  description String?
  createdAt   DateTime  @default(now())

  @@map("transactions")
}

enum Role {
  ADMIN
  MEMBER
}

enum LoanStatus {
  PENDING
  APPROVED
  DISBURSED
  REPAID
  REJECTED
}

enum CardStatus {
  PENDING
  ACTIVE
  BLOCKED
  EXPIRED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  CARD_FUNDING
}
